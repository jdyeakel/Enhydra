#DIRICHLET VERSION
#draw proportional contribution vector from random dirichlet
p_vec <- numeric(nprey)
#if (N == 1) {
#  p_vec[1:nprey-1] <- rdirichlet(1,Dir_param)
#} else {
p_vec[1:nprey] <- rdirichlet(1,Dir_param[i,])
#}
#p_vec[nprey] <- 1 - sum(p_vec)
#Draw prey values from each prey
cp_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$CM[x],prey$CSD[x])})
np_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$NM[x],prey$NSD[x])})
#Calculate weighted average
cp <- p_vec %*% cp_vec
np <- p_vec %*% np_vec
#Prey biomass
#set to one if each prey is to be equally weighted
#(assume 1 kg of each thing is eaten rather than at individual level)
mp <- 1 #prey$Biomass[next_prey]
#weights for body size
f <- mb/(mb + mp)
cb_next <- f*cb + (1-f)*cp
nb_next <- f*nb + (1-f)*np
c_m[i,t+1] <- cb_next
n_m[i,t+1] <- nb_next
} #end i
} #end t
#Dirichlet-Normal Approximation for expectation and variance
a0 <- sum(Dir_param[1,1:nprey])
#Expectation of the sum(p_i*X_i) quantity
EDir_c <- (Dir_param[1,1:nprey]/a0) %*% prey$CM
EDir_n <- (Dir_param[1,1:nprey]/a0) %*% prey$NM
#Expectation of p_i
Ep <- Dir_param[1,1:nprey]/a0
#Variance of p_i
VarDir_p <- sapply(Dir_param,function(x){(x*(a0-x)) / (a0^2*(a0+1))})
#Covariance of p_i,p_j
CovDir_p <- matrix(0,nprey,nprey)
for (i in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[i,j] <- -(Dir_param[i]*Dir_param[j]) / (a0^2*(a0 + 1))
}
}
diag(CovDir_p) <- 0
#Variance of the sum(p_i*X_i) quantity for CARBON
VarDir_c_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_c_vec[i] <- (prey$CSD[i]^2)*VarDir_p[i] + Ep[i]^2*(prey$CSD[i])^2  + VarDir_p[i]*prey$CM[i]^2 + prey$CM[i]*sum(CovDir_p[i,-i] * prey$CM[-i])
}
VarDir_c <- sum(VarDir_c_vec)
#Variance of the sum(p_i*X_i) quantity for NITROGEN
VarDir_n_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_n_vec[i] <- (prey$NSD[i]^2)*VarDir_p[i] + Ep[i]^2 * prey$NSD[i]^2  + VarDir_p[i]*prey$NM[i]^2 + prey$NM[i]*sum(CovDir_p[i,-i] * prey$NM[-i])
}
VarDir_n <- sum(VarDir_n_vec)
#Plotting observed and expected values for the variance CARBON
binsize = 1000
#analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*cp_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_c <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(c_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d13C SD",col="black")
lines(analyticDirSD_c)
#lines(analyticSD)
binsize = 1000
#analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*np_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_n <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD_n)
#Plot prey ellipses
plot(ellip_prey[[1]],type="l",xlim=c(-22,-10),ylim=c(6,18),col="gray",xlab="d13C",ylab="d15N")
for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
}
prey
prey$CSD^2
sum(prey$CSD^2)
VarDir_c
Dir_param <- matrix(1,N,nprey)
Dir_param[1,6] <- 100
#Which prey item does each consumer specialize on?
s_prey <- sample(nprey,N,replace=TRUE)
#cumulative distribution
#plot(sapply(seq(1,12),function(x){length(which(s_prey<x))/length(s_prey)}))
#Loop over time
for (t in 1:(t_term-1)) {
#Loop over consumers
for (i in 1:N) {
#Define the carbon, nitrogen isotope values of body at time t
cb <- c_m[i,t]
nb <- n_m[i,t]
#Define body mass of consumer
mb <- bmass[i]
#Determine next prey item
#With probability equal to e_gen[i], they will specialize
#With probability equal to 1-e_gen[i], they will draw from prey randomly
#RANDOM DRAW VERSION
#Draw random value
#     rdraw <- runif(1)
#     if (rdraw < theta[i]) {
#       #If specialist, select it's preferred prey
#       next_prey <- s_prey[i]
#     } else {
#       #If generalist, randomly select from all prey
#       next_prey <- sample(nprey,1,replace=TRUE)
#     }
#     #Randomly draw prey isotope values from known mean and sd
#     cp_mean <- prey$CM[next_prey]
#     cp_sd <- prey$CSD[next_prey]
#     cp <- rnorm(1,cp_mean,cp_sd)
#     np_mean <- prey$NM[next_prey]
#     np_sd <- prey$NSD[next_prey]
#     np <- rnorm(1,np_mean,np_sd)
#DIRICHLET VERSION
#draw proportional contribution vector from random dirichlet
p_vec <- numeric(nprey)
#if (N == 1) {
#  p_vec[1:nprey-1] <- rdirichlet(1,Dir_param)
#} else {
p_vec[1:nprey] <- rdirichlet(1,Dir_param[i,])
#}
#p_vec[nprey] <- 1 - sum(p_vec)
#Draw prey values from each prey
cp_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$CM[x],prey$CSD[x])})
np_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$NM[x],prey$NSD[x])})
#Calculate weighted average
cp <- p_vec %*% cp_vec
np <- p_vec %*% np_vec
#Prey biomass
#set to one if each prey is to be equally weighted
#(assume 1 kg of each thing is eaten rather than at individual level)
mp <- 1 #prey$Biomass[next_prey]
#weights for body size
f <- mb/(mb + mp)
cb_next <- f*cb + (1-f)*cp
nb_next <- f*nb + (1-f)*np
c_m[i,t+1] <- cb_next
n_m[i,t+1] <- nb_next
} #end i
} #end t
colors <- rep(brewer.pal(8,"Set1"),round(N/9)+1)
#Plot prey ellipses
plot(ellip_prey[[1]],type="l",xlim=c(-22,-10),ylim=c(6,18),col="gray",xlab="d13C",ylab="d15N")
for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
}
#Dirichlet-Normal Approximation for expectation and variance
a0 <- sum(Dir_param[1,1:nprey])
#Expectation of the sum(p_i*X_i) quantity
EDir_c <- (Dir_param[1,1:nprey]/a0) %*% prey$CM
EDir_n <- (Dir_param[1,1:nprey]/a0) %*% prey$NM
#Expectation of p_i
Ep <- Dir_param[1,1:nprey]/a0
#Variance of p_i
VarDir_p <- sapply(Dir_param,function(x){(x*(a0-x)) / (a0^2*(a0+1))})
#Covariance of p_i,p_j
CovDir_p <- matrix(0,nprey,nprey)
for (i in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[i,j] <- -(Dir_param[i]*Dir_param[j]) / (a0^2*(a0 + 1))
}
}
diag(CovDir_p) <- 0
#Variance of the sum(p_i*X_i) quantity for CARBON
VarDir_c_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_c_vec[i] <- (prey$CSD[i]^2)*VarDir_p[i] + Ep[i]^2*(prey$CSD[i])^2  + VarDir_p[i]*prey$CM[i]^2 + prey$CM[i]*sum(CovDir_p[i,-i] * prey$CM[-i])
}
VarDir_c <- sum(VarDir_c_vec)
#Variance of the sum(p_i*X_i) quantity for NITROGEN
VarDir_n_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_n_vec[i] <- (prey$NSD[i]^2)*VarDir_p[i] + Ep[i]^2 * prey$NSD[i]^2  + VarDir_p[i]*prey$NM[i]^2 + prey$NM[i]*sum(CovDir_p[i,-i] * prey$NM[-i])
}
VarDir_n <- sum(VarDir_n_vec)
#CARBON
#Analytical approximation for pure specialist, SD=0
# par(mfrow=c(2,1))
# analyticE <- sapply(seq(1,t_term),function(x){f^x*(c_init - cp_mean) + cp_mean})
# plot(c_m[ind,2:10000],pch=16,cex=0.5,xlab="time",ylab="d13C",col="gray")
# lines(analyticE)
#Plotting observed and expected values for the expectation CARBON
analyticEDir <- sapply(seq(1,t_term),function(x){f^x*(c_init - EDir_c) + EDir_c})
plot(c_m[ind,2:10000],pch=16,cex=0.5,xlab="time",ylab="d13C",col="gray")
lines(analyticEDir)
#Plotting observed and expected values for the variance CARBON
binsize = 1000
#analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*cp_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_c <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(c_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d13C SD",col="black")
lines(analyticDirSD_c)
#lines(analyticSD)
#Plotting observed and expected values for the variance NITROGEN
analyticEDir <- sapply(seq(1,t_term),function(x){f^x*(n_init - EDir_n) + EDir_n})
plot(n_m[ind,2:t_term],pch=16,cex=0.5,xlab="time",ylab="d15N",col="gray")
lines(analyticEDir)
#Plotting observed and expected values for the variance NITROGEN
binsize = 1000
#analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*np_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_n <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD_n)
binsize = 1000
#analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*np_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_n <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD_n)
binsize = 100
#analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*np_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_n <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD_n)
binsize = 200
#analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*np_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_n <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD_n)
binsize = 5
#analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*np_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_n <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD_n)
binsize = 500
#analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*np_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_n <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD_n)
xnorm <- rnorm(1000,-15,2)
ynorm <- rnorm(1000,-5,2)
plot(c(xnorm,ynorm))
hist(c(xnorm,ynorm))
znorm <- xnorm + ynorm
hist(znorm)
hist(znorm,breaks=20)
ynorm <- rnorm(1000,0,2)
hist(c(xnorm,ynorm))
xnorm <- rnorm(1000,-50,2)
hist(c(xnorm,ynorm))
znorm <- xnorm + ynorm
hist(znorm)
ynorm <- rnorm(1000,50,2)
xnorm <- rnorm(1000,100,2)
hist(c(xnorm,ynorm))
znorm <- xnorm + ynorm
hist(znorm)
mean(xnorm) + mean(ynorm)
var(ynorm) + var(xnorm)
var(znorm)
avec <- numeric(1,N)
avec <- rep(1,N)
N <- 10
avec <- rep(1,N)
VEC
avec
avec <- matrix(0,N,nprey)
avec[1,] <- rep(1,nprey)
avec
epsilon <- seq(0,1,length.out=length(avec[,1]))
epsilonb
epsilon
generalist <- rep(1,nprey)
specialist <- generalist[1] <- 100
generalist
specialist
epsilon <- seq(0,1,length.out=10)
avec <- matrix(0,10,nprey)
generalist <- rep(1,nprey)
specialist <- generalist; specialist[1] <- 100
generalist
specialist
avec <- matrix(0,10,nprey)
#Vary from generalist to a specialist
for (i in 1:10) {
avec[i,] <- epsilon*generalist + (1-epsilon)*specialist
}
epsilon*generalist + (1-epsilon)*specialist
epsilon
#Vary from generalist to a specialist
for (i in 1:10) {
avec[i,] <- epsilon[i]*generalist + (1-epsilon[i])*specialist
}
avec
?diag
sim_matrix <- matrix(1,N,N)
diff_matrix <- sim_matrix; diag(sim_matrix <- 100)
sim_matrix <- matrix(1,N,N)
diff_matrix <- sim_matrix; diag(sim_matrix) <- 100
sim_matrix
sim_matrix <- matrix(1,N,N)
diff_matrix <- sim_matrix; diag(diff_matrix) <- 100
diff_matrix
sim_matrix
psi <- seq(0,1,length.out=10)
sim_list <- list()
for (i in 1:length(psi)) {
sim_list[[i]] <- psi[i]*sim_matrix + (1-psi[i])*diff_matrix
}
sim_list[[1]]
sim_list[[2]]
sim_list[[3]]
sim_list[[4]]
sim_list[[10]]
avec
sim_matrix <- matrix(0,N,N)
diff_matrix <- sim_matrix; diag(diff_matrix) <- 1
#similarity measure
psi <- seq(0,1,length.out=10)
sim_list <- list()
for (i in 1:length(psi)) {
sim_list[[i]] <- psi[i]*sim_matrix + (1-psi[i])*diff_matrix
}
sim_list[[1]]
sim_list[[2]]
sim_list[[3]]
sim_list[[10]]
sim_matrix <- matrix(1,N,N)
diff_matrix <- matrix(0,N,N); diag(diff_matrix) <- 1
sim_matrix
diff_matrix
psi <- seq(0,1,length.out=10)
sim_list <- list()
for (i in 1:length(psi)) {
sim_list[[i]] <- psi[i]*sim_matrix + (1-psi[i])*diff_matrix
}
sim_list[[1]]
sim_list[[2]]
sim_list[[3]]
sim_list[[4]]
sim_list[[5]]
sim_list[[6]]
sim_list[[10]]
sim_matrix
avec[1,]
avec[10,]
epsilon_v <- seq(0,1,length.out=10)
psi_v <- seq(0,1,length.out=10)
epsilon_v <- seq(0,1,length.out=10)
avec <- matrix(0,10,nprey)
generalist <- rep(1/nprey,nprey)
specialist <- numeric(nprey); specialist[1] <- 1
avec
#Vary from generalist to a specialist
for (i in 1:10) {
avec[i,] <- epsilon_v[i]*generalist + (1-epsilon_v[i])*specialist
}
avec
p
avec
p <- avec[4,]
p
(p - specialist) %*% 1/(generalist-specialist)
generalist-specialist
p-specialist
1/(generalist-specialist)
(p - specialist) %*% (1/(generalist-specialist))
p
avec[4,]
epsilon
(p - specialist) %*% (1/abs(generalist-specialist)^2)
(p - specialist) %*% (1/abs(generalist-specialist))
p
specialist
generalist
(p - specialist) %*% (1/abs(generalist-specialist))^2
(p - specialist) %*% (1/abs(generalist-specialist))
p <- avec[2,]
(p - specialist) %*% (1/abs(generalist-specialist))
avec
(p - specialist) %*% (1/abs(generalist-specialist))
epsilon
p = avec[10,]
(p - specialist) %*% (1/abs(generalist-specialist))
norm
(p - specialist) %*% (1/norm(generalist-specialist))
(p - specialist) %*% (1/abs(generalist-specialist))
norm(generalist)
generalist %*% generalist
generalist %*% specialist
specialist %*% specialist
(p - specialist) %*% (1/((generalist-specialist) %*% (generalist-specialist))
)
(1/((generalist-specialist) %*% (generalist-specialist)))
(p - specialist) %*% (1/((generalist-specialist) %*% (generalist-specialist)))
z = (p - specialist) %*% (1/((generalist-specialist) %*% (generalist-specialist)))
z
sum(z)
sum(z[,1])
z
sum(as.numeric(z))
z[1]
z[2]]
z[2]
prod(z)
z = (p - specialist) * (1/((generalist-specialist) %*% (generalist-specialist)))
z
sum(z)
z += z
z = (p - specialist) / ((generalist-specialist) %*% (generalist-specialist))
z
z %*% z
p
(generalist-specialist) / ((generalist-specialist) %*% (generalist-specialist))
sum((generalist-specialist) / ((generalist-specialist) %*% (generalist-specialist)))
specialist / (specialist %*% specialist)
generalist / (generalist %*% generalist)
generalist
z = specialist - generalist
z
z / (z%*%z)
sqrt(sum(z^2))
z/sqrt(sum(z^2))
z/(sqrt(sum(z^2)))
sum(z/(sqrt(sum(z^2))))
