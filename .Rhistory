EDir_n <- (Dir_param[i,1:nprey]/a0) %*% prey$NM
#Expectation of p_i
Ep <- Dir_param[i,1:nprey]/a0
#Variance of p_i
VarDir_p <- sapply(Dir_param[i,],function(x){(x*(a0-x)) / (a0^2*(a0+1))})
#Covariance of p_i,p_j
CovDir_p <- matrix(0,nprey,nprey)
for (k in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[k,j] <- -(Dir_param[i,k]*Dir_param[i,j]) / (a0^2*(a0 + 1))
}
}
diag(CovDir_p) <- 0
#Variance of the sum(p_i*X_i) quantity for CARBON
VarDir_c_vec <- numeric(nprey)
for (j in 1:nprey) {
VarDir_c_vec[j] <- (prey$CSD[j]^2)*VarDir_p[j] + Ep[j]^2*(prey$CSD[j])^2  + VarDir_p[j]*prey$CM[j]^2 + prey$CM[j]*sum(CovDir_p[j,-j] * prey$CM[-j])
}
VarDir_c <- sum(VarDir_c_vec)
#Variance of the sum(p_i*X_i) quantity for NITROGEN
VarDir_n_vec <- numeric(nprey)
for (j in 1:nprey) {
VarDir_n_vec[j] <- (prey$NSD[j]^2)*VarDir_p[j] + Ep[j]^2 * prey$NSD[j]^2  + VarDir_p[j]*prey$NM[j]^2 + prey$NM[j]*sum(CovDir_p[j,-j] * prey$NM[-j])
}
VarDir_n <- sum(VarDir_n_vec)
#Individual expectations as a function of time.
analyticEDir_c <- sapply(seq(1,t_term),function(x){f^x*(c_init - EDir_c) + EDir_c})
analyticEDir_n <- sapply(seq(1,t_term),function(x){f^x*(n_init - EDir_n) + EDir_n})
#Individual SD as a function of time
analyticDirSD_c <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_n <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
#Limit
E_lim_c[i] <- analyticEDir_c[t_term]
E_lim_n[i] <- analyticEDir_n[t_term]
Var_lim_c[i] <- analyticDirSD_c[t_term]^2
Var_lim_n[i] <- analyticDirSD_n[t_term]^2
}
colors <- rep(brewer.pal(8,"Set1"),round(N/9)+1)
#Plot prey ellipses
plot(ellip_prey[[1]],type="l",xlim=c(-22,-10),ylim=c(6,18),col="gray",xlab="d13C",ylab="d15N")
for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(ellipse(x=0,scale = c(sqrt(Var_lim_c[i]),sqrt(Var_lim_n[i])),centre=c(E_lim_c[i],E_lim_n[i]),level=CI))
}
points(E_lim_c,E_lim_n,col="black",pch=16,cex=0.7)
?diff
plot(diff(c_m[1,],lag=1))
plot(diff(c_m[1,0:100],lag=1))
plot(diff(c_m[1,0:100],lag=1),type="l")
plot(ellip_prey[[1]],type="l",xlim=c(-22,-10),ylim=c(6,18),col="gray",xlab="d13C",ylab="d15N")
for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(ellipse(x=0,scale = c(sqrt(Var_lim_c[i]),sqrt(Var_lim_n[i])),centre=c(E_lim_c[i],E_lim_n[i]),level=CI))
}
points(E_lim_c,E_lim_n,col="black",pch=16,cex=0.7)
plot(diff(c_m[1,0:500],lag=1),type="l")
plot(abs(diff(c_m[1,0:500],lag=1)),type="l")
plot(abs(diff(n_m[1,0:500],lag=1)),type="l")
#Loop over time
for (t in 1:(t_term-1)) {
#Loop over consumers
for (i in 1:N) {
#Define the carbon, nitrogen isotope values of body at time t
cb <- c_m[i,t]
nb <- n_m[i,t]
#Define body mass of consumer
#mb <- bmass[i]
#Determine next prey item
#With probability equal to e_gen[i], they will specialize
#With probability equal to 1-e_gen[i], they will draw from prey randomly
#RANDOM DRAW VERSION
#Draw random value
#     rdraw <- runif(1)
#     if (rdraw < theta[i]) {
#       #If specialist, select it's preferred prey
#       next_prey <- s_prey[i]
#     } else {
#       #If generalist, randomly select from all prey
#       next_prey <- sample(nprey,1,replace=TRUE)
#     }
#     #Randomly draw prey isotope values from known mean and sd
#     cp_mean <- prey$CM[next_prey]
#     cp_sd <- prey$CSD[next_prey]
#     cp <- rnorm(1,cp_mean,cp_sd)
#     np_mean <- prey$NM[next_prey]
#     np_sd <- prey$NSD[next_prey]
#     np <- rnorm(1,np_mean,np_sd)
#DIRICHLET VERSION
#draw proportional contribution vector from random dirichlet
p_vec <- numeric(nprey)
#if (N == 1) {
#  p_vec[1:nprey-1] <- rdirichlet(1,Dir_param)
#} else {
p_vec[1:nprey] <- rdirichlet(1,Dir_param[i,])
#}
#p_vec[nprey] <- 1 - sum(p_vec)
#Draw prey values from each prey
cp_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$CM[x],prey$CSD[x])})
np_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$NM[x],prey$NSD[x])})
#Calculate weighted average
cp <- p_vec %*% cp_vec
np <- p_vec %*% np_vec
#Prey biomass
#set to one if each prey is to be equally weighted
#(assume 1 kg of each thing is eaten rather than at individual level)
#mp <- 1 #prey$Biomass[next_prey]
#Define incorporation rate
incorp_rate <- 0.2
#weights for body size
#f <- mb/(mb + mp)
f <- 1 - incorp_rate
cb_next <- f*cb + (1-f)*cp
nb_next <- f*nb + (1-f)*np
c_m[i,t+1] <- cb_next
n_m[i,t+1] <- nb_next
} #end i
} #end t
#Calculate the analytical expectation and variance trajectory for EACH INDIVIDUAL
E_lim_c <- numeric(N)
E_lim_n <- numeric(N)
Var_lim_c <- numeric(N)
Var_lim_n <- numeric(N)
for (i in 1:N) {
#ind <- 1
#plot(c_m[ind,],pch=16,cex=0.25) #; lines(c_m[ind,])
#Dirichlet-Normal Approximation for expectation and variance
a0 <- sum(Dir_param[i,1:nprey])
#Expectation of the sum(p_i*X_i) quantity
EDir_c <- (Dir_param[i,1:nprey]/a0) %*% prey$CM
EDir_n <- (Dir_param[i,1:nprey]/a0) %*% prey$NM
#Expectation of p_i
Ep <- Dir_param[i,1:nprey]/a0
#Variance of p_i
VarDir_p <- sapply(Dir_param[i,],function(x){(x*(a0-x)) / (a0^2*(a0+1))})
#Covariance of p_i,p_j
CovDir_p <- matrix(0,nprey,nprey)
for (k in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[k,j] <- -(Dir_param[i,k]*Dir_param[i,j]) / (a0^2*(a0 + 1))
}
}
diag(CovDir_p) <- 0
#Variance of the sum(p_i*X_i) quantity for CARBON
VarDir_c_vec <- numeric(nprey)
for (j in 1:nprey) {
VarDir_c_vec[j] <- (prey$CSD[j]^2)*VarDir_p[j] + Ep[j]^2*(prey$CSD[j])^2  + VarDir_p[j]*prey$CM[j]^2 + prey$CM[j]*sum(CovDir_p[j,-j] * prey$CM[-j])
}
VarDir_c <- sum(VarDir_c_vec)
#Variance of the sum(p_i*X_i) quantity for NITROGEN
VarDir_n_vec <- numeric(nprey)
for (j in 1:nprey) {
VarDir_n_vec[j] <- (prey$NSD[j]^2)*VarDir_p[j] + Ep[j]^2 * prey$NSD[j]^2  + VarDir_p[j]*prey$NM[j]^2 + prey$NM[j]*sum(CovDir_p[j,-j] * prey$NM[-j])
}
VarDir_n <- sum(VarDir_n_vec)
#Individual expectations as a function of time.
analyticEDir_c <- sapply(seq(1,t_term),function(x){f^x*(c_init - EDir_c) + EDir_c})
analyticEDir_n <- sapply(seq(1,t_term),function(x){f^x*(n_init - EDir_n) + EDir_n})
#Individual SD as a function of time
analyticDirSD_c <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_n <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
#Limit
E_lim_c[i] <- analyticEDir_c[t_term]
E_lim_n[i] <- analyticEDir_n[t_term]
Var_lim_c[i] <- analyticDirSD_c[t_term]^2
Var_lim_n[i] <- analyticDirSD_n[t_term]^2
}
plot(abs(diff(n_m[1,0:500],lag=1)),type="l")
plot(abs(n_m[1,0:500],lag=1),type="l")
plot(diff(n_m[1,0:500],lag=1),type="l")
#Loop over time
for (t in 1:(t_term-1)) {
#Loop over consumers
for (i in 1:N) {
#Define the carbon, nitrogen isotope values of body at time t
cb <- c_m[i,t]
nb <- n_m[i,t]
#Define body mass of consumer
#mb <- bmass[i]
#Determine next prey item
#With probability equal to e_gen[i], they will specialize
#With probability equal to 1-e_gen[i], they will draw from prey randomly
#RANDOM DRAW VERSION
#Draw random value
#     rdraw <- runif(1)
#     if (rdraw < theta[i]) {
#       #If specialist, select it's preferred prey
#       next_prey <- s_prey[i]
#     } else {
#       #If generalist, randomly select from all prey
#       next_prey <- sample(nprey,1,replace=TRUE)
#     }
#     #Randomly draw prey isotope values from known mean and sd
#     cp_mean <- prey$CM[next_prey]
#     cp_sd <- prey$CSD[next_prey]
#     cp <- rnorm(1,cp_mean,cp_sd)
#     np_mean <- prey$NM[next_prey]
#     np_sd <- prey$NSD[next_prey]
#     np <- rnorm(1,np_mean,np_sd)
#DIRICHLET VERSION
#draw proportional contribution vector from random dirichlet
p_vec <- numeric(nprey)
#if (N == 1) {
#  p_vec[1:nprey-1] <- rdirichlet(1,Dir_param)
#} else {
p_vec[1:nprey] <- rdirichlet(1,Dir_param[i,])
#}
#p_vec[nprey] <- 1 - sum(p_vec)
#Draw prey values from each prey
cp_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$CM[x],prey$CSD[x])})
np_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$NM[x],prey$NSD[x])})
#Calculate weighted average
cp <- p_vec %*% cp_vec
np <- p_vec %*% np_vec
#Prey biomass
#set to one if each prey is to be equally weighted
#(assume 1 kg of each thing is eaten rather than at individual level)
#mp <- 1 #prey$Biomass[next_prey]
#Define incorporation rate
incorp_rate <- 0.05
#weights for body size
#f <- mb/(mb + mp)
f <- 1 - incorp_rate
cb_next <- f*cb + (1-f)*cp
nb_next <- f*nb + (1-f)*np
c_m[i,t+1] <- cb_next
n_m[i,t+1] <- nb_next
} #end i
} #end t
#Calculate the analytical expectation and variance trajectory for EACH INDIVIDUAL
E_lim_c <- numeric(N)
E_lim_n <- numeric(N)
Var_lim_c <- numeric(N)
Var_lim_n <- numeric(N)
for (i in 1:N) {
#ind <- 1
#plot(c_m[ind,],pch=16,cex=0.25) #; lines(c_m[ind,])
#Dirichlet-Normal Approximation for expectation and variance
a0 <- sum(Dir_param[i,1:nprey])
#Expectation of the sum(p_i*X_i) quantity
EDir_c <- (Dir_param[i,1:nprey]/a0) %*% prey$CM
EDir_n <- (Dir_param[i,1:nprey]/a0) %*% prey$NM
#Expectation of p_i
Ep <- Dir_param[i,1:nprey]/a0
#Variance of p_i
VarDir_p <- sapply(Dir_param[i,],function(x){(x*(a0-x)) / (a0^2*(a0+1))})
#Covariance of p_i,p_j
CovDir_p <- matrix(0,nprey,nprey)
for (k in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[k,j] <- -(Dir_param[i,k]*Dir_param[i,j]) / (a0^2*(a0 + 1))
}
}
diag(CovDir_p) <- 0
#Variance of the sum(p_i*X_i) quantity for CARBON
VarDir_c_vec <- numeric(nprey)
for (j in 1:nprey) {
VarDir_c_vec[j] <- (prey$CSD[j]^2)*VarDir_p[j] + Ep[j]^2*(prey$CSD[j])^2  + VarDir_p[j]*prey$CM[j]^2 + prey$CM[j]*sum(CovDir_p[j,-j] * prey$CM[-j])
}
VarDir_c <- sum(VarDir_c_vec)
#Variance of the sum(p_i*X_i) quantity for NITROGEN
VarDir_n_vec <- numeric(nprey)
for (j in 1:nprey) {
VarDir_n_vec[j] <- (prey$NSD[j]^2)*VarDir_p[j] + Ep[j]^2 * prey$NSD[j]^2  + VarDir_p[j]*prey$NM[j]^2 + prey$NM[j]*sum(CovDir_p[j,-j] * prey$NM[-j])
}
VarDir_n <- sum(VarDir_n_vec)
#Individual expectations as a function of time.
analyticEDir_c <- sapply(seq(1,t_term),function(x){f^x*(c_init - EDir_c) + EDir_c})
analyticEDir_n <- sapply(seq(1,t_term),function(x){f^x*(n_init - EDir_n) + EDir_n})
#Individual SD as a function of time
analyticDirSD_c <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD_n <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
#Limit
E_lim_c[i] <- analyticEDir_c[t_term]
E_lim_n[i] <- analyticEDir_n[t_term]
Var_lim_c[i] <- analyticDirSD_c[t_term]^2
Var_lim_n[i] <- analyticDirSD_n[t_term]^2
}
plot(diff(n_m[1,0:500],lag=1),type="l")
rep((1/N),N)
Exp_lim_pop <- c(rep((1/N),N) %*% E_lim_c,rep((1/N),N) %*% E_lim_n)
Exp_lim_pop
plot(diff(n_m[1,0:500]^2,lag=1),type="l")
E_lim_c[-i]
i
E_lim_c
E_lim_c[-i]
E_lim_c[i]
Var_lim_pop_vec_c <- numeric(N)
i=1
Var_lim_pop_vec_c[i] <- N*Var_lim_c[i] + (N-1)*E_lim_c[i]^2 - sum(E_lim_c[i]*E_lim_c[-i])
for (i in 1:N) {
Var_lim_pop_vec_c[i] <- N*Var_lim_c[i] + (N-1)*E_lim_c[i]^2 - sum(E_lim_c[i]*E_lim_c[-i])
}
Var_lim_pop_c <- (1/(N^2))*sum(Var_lim_pop_vec_c)
Var_lim_pop_c
Var_lim_pop_n <- (1/(N^2))*sum(Var_lim_pop_vec_n)
Var_lim_pop_vec_c <- numeric(N)
Var_lim_pop_vec_n <- numeric(N)
for (i in 1:N) {
Var_lim_pop_vec_c[i] <- N*Var_lim_c[i] + (N-1)*E_lim_c[i]^2 - sum(E_lim_c[i]*E_lim_c[-i])
Var_lim_pop_vec_n[i] <- N*Var_lim_n[i] + (N-1)*E_lim_n[i]^2 - sum(E_lim_n[i]*E_lim_n[-i])
}
Var_lim_pop_c <- (1/(N^2))*sum(Var_lim_pop_vec_c)
Var_lim_pop_n <- (1/(N^2))*sum(Var_lim_pop_vec_n)
Var_lim_pop_c
Var_lim_pop_n
pop_ellipse <- ellipse(x=0,scale=c(sqrt(Var_lim_pop_c),sqrt(Var_lim_pop_n)),centre=Exp_lim_pop)
plot(ellip_prey[[1]],type="l",xlim=c(-22,-10),ylim=c(6,18),col="gray",xlab="d13C",ylab="d15N")
for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(ellipse(x=0,scale = c(sqrt(Var_lim_c[i]),sqrt(Var_lim_n[i])),centre=c(E_lim_c[i],E_lim_n[i]),level=CI))
}
points(E_lim_c,E_lim_n,col="black",pch=16,cex=0.7)
lines(pop_ellipse,col="black",lty=3)
lines(pop_ellipse,col="black",lty=3,lwd=3)
points(Exp_lim_pop,pch=16,col="black")
lines(pop_ellipse,col="black",lty=3,lwd=3)
Exp_lim_pop
plot(ellip_prey[[1]],type="l",xlim=c(-22,-10),ylim=c(6,18),col="gray",xlab="d13C",ylab="d15N")
for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(ellipse(x=0,scale = c(sqrt(Var_lim_c[i]),sqrt(Var_lim_n[i])),centre=c(E_lim_c[i],E_lim_n[i]),level=CI))
}
points(E_lim_c,E_lim_n,col="black",pch=16,cex=0.7)
#Population Ellipse
pop_ellipse <- ellipse(x=0,scale=c(sqrt(Var_lim_pop_c),sqrt(Var_lim_pop_n)),centre=Exp_lim_pop)
points(Exp_lim_pop,pch=16,col="black")
lines(pop_ellipse,col="black",lty=3,lwd=3)
pop_ellipse <- ellipse(x=0,scale=c(sqrt(Var_lim_pop_c),sqrt(Var_lim_pop_n)),centre=Exp_lim_pop)
points(Exp_lim_pop[1],Exp_lim_pop[2],pch=16,col="black")
lines(pop_ellipse,col="black",lty=3,lwd=3)
cov_cn <- rep((1/N),N) %*% E_lim_c*E_lim_n
cov_cn <- (rep((1/N),N) %*% E_lim_c*E_lim_n) - (Exp_lim_pop[1]*Exp_lim_pop[2])
cov_cn
(rep((1/N),N) %*% E_lim_c*E_lim_n)
E_lim_c
E_lim_c*E_lim_n
cov_cn <- (rep((1/N),N) %*% (E_lim_c*E_lim_n)) - (Exp_lim_pop[1]*Exp_lim_pop[2])
cov_cn
cov_cn <- (rep((1/N),N) %*% (E_lim_c*E_lim_n)) - (Exp_lim_pop[1]*Exp_lim_pop[2])
cov_nc <- (rep((1/N),N) %*% (E_lim_n*E_lim_c)) - (Exp_lim_pop[2]*Exp_lim_pop[1])
cov_nc
cov_cn
sqrt(cov_cn)
pop_ellipse <- ellipse(x=0,scale=matrix(c(sqrt(Var_lim_pop_c),sqrt(-cov_cn),sqrt(-cov_nc),sqrt(Var_lim_pop_n))),centre=Exp_lim_pop)
points(Exp_lim_pop[1],Exp_lim_pop[2],pch=16,col="black")
lines(pop_ellipse,col="black",lty=3,lwd=3)
plot(ellip_prey[[1]],type="l",xlim=c(-22,-10),ylim=c(6,18),col="gray",xlab="d13C",ylab="d15N")
for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(ellipse(x=0,scale = c(sqrt(Var_lim_c[i]),sqrt(Var_lim_n[i])),centre=c(E_lim_c[i],E_lim_n[i]),level=CI))
}
points(E_lim_c,E_lim_n,col="black",pch=16,cex=0.7)
#Population Ellipse
pop_ellipse <- ellipse(x=0,scale=c(sqrt(Var_lim_pop_c),sqrt(Var_lim_pop_n)),centre=Exp_lim_pop)
#pop_ellipse <- ellipse(x=0,scale=matrix(c(sqrt(Var_lim_pop_c),sqrt(cov_cn),sqrt(cov_nc),sqrt(Var_lim_pop_n))),centre=Exp_lim_pop)
points(Exp_lim_pop[1],Exp_lim_pop[2],pch=16,col="black")
lines(pop_ellipse,col="black",lty=3,lwd=3)
pop_ellipse <- ellipse(x=0,scale=matrix(c(sqrt(Var_lim_pop_c),-sqrt(cov_cn),-sqrt(cov_nc),sqrt(Var_lim_pop_n))),centre=Exp_lim_pop)
points(Exp_lim_pop[1],Exp_lim_pop[2],pch=16,col="black")
lines(pop_ellipse,col="black",lty=3,lwd=3)
pop_ellipse <- ellipse(x=0,scale=matrix(c(sqrt(Var_lim_pop_c),-sqrt(-cov_cn),-sqrt(-cov_nc),sqrt(Var_lim_pop_n))),centre=Exp_lim_pop)
points(Exp_lim_pop[1],Exp_lim_pop[2],pch=16,col="black")
lines(pop_ellipse,col="black",lty=3,lwd=3)
pop_ellipse <- ellipse(x=0,scale=matrix(c(sqrt(Var_lim_pop_c),sqrt(-cov_cn),sqrt(-cov_nc),sqrt(Var_lim_pop_n))),centre=Exp_lim_pop)
points(Exp_lim_pop[1],Exp_lim_pop[2],pch=16,col="black")
lines(pop_ellipse,col="black",lty=3,lwd=3)
cov_cn <- ((rep((1/N),N) %*% (E_lim_c*E_lim_n)) - (Exp_lim_pop[1]*Exp_lim_pop[2]))^2
cov_nc <- ((rep((1/N),N) %*% (E_lim_n*E_lim_c)) - (Exp_lim_pop[2]*Exp_lim_pop[1]))^2
colors <- rep(brewer.pal(8,"Set1"),round(N/9)+1)
#Plot prey ellipses
plot(ellip_prey[[1]],type="l",xlim=c(-22,-10),ylim=c(6,18),col="gray",xlab="d13C",ylab="d15N")
for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(ellipse(x=0,scale = c(sqrt(Var_lim_c[i]),sqrt(Var_lim_n[i])),centre=c(E_lim_c[i],E_lim_n[i]),level=CI))
}
points(E_lim_c,E_lim_n,col="black",pch=16,cex=0.7)
#Population Ellipse
pop_ellipse <- ellipse(x=0,scale=c(sqrt(Var_lim_pop_c),sqrt(Var_lim_pop_n)),centre=Exp_lim_pop)
pop_ellipse <- ellipse(x=0,scale=matrix(c(sqrt(Var_lim_pop_c),sqrt(cov_cn),sqrt(cov_nc),sqrt(Var_lim_pop_n))),centre=Exp_lim_pop)
points(Exp_lim_pop[1],Exp_lim_pop[2],pch=16,col="black")
lines(pop_ellipse,col="black",lty=3,lwd=3)
rawdat <- cbind(c(c_m[1,4000:5000],c_m[2,4000:5000]),c(n_m[1,4000:5000],n_m[2,4000:5000])
)
plot(rawdat)
cov(rawdat)
matrix(c(sqrt(Var_lim_pop_c),sqrt(cov_cn),sqrt(cov_nc),sqrt(Var_lim_pop_n)))
matrix(2,2,c(sqrt(Var_lim_pop_c),sqrt(cov_cn),sqrt(cov_nc),sqrt(Var_lim_pop_n)))
matrix(c(sqrt(Var_lim_pop_c),sqrt(cov_cn),sqrt(cov_nc),sqrt(Var_lim_pop_n)),2,2)
pop_ellipse <- ellipse(x=0,scale=matrix(c(Var_lim_pop_c),sqrt(cov_cn),sqrt(cov_nc),Var_lim_pop_n),2,2),centre=Exp_lim_pop)
matrix(c(Var_lim_pop_c,sqrt(cov_cn),sqrt(cov_nc),Var_lim_pop_n)
)
matrix(c(Var_lim_pop_c,sqrt(cov_cn),sqrt(cov_nc),Var_lim_pop_n),2,2)
cov_cn <- ((rep((1/N),N) %*% (E_lim_c*E_lim_n)) - (Exp_lim_pop[1]*Exp_lim_pop[2]))
cov_nc <- ((rep((1/N),N) %*% (E_lim_n*E_lim_c)) - (Exp_lim_pop[2]*Exp_lim_pop[1]))
cov_cn
cov_cn <- ((rep((1/N),N) %*% (E_lim_c*E_lim_n)) - (Exp_lim_pop[1]*Exp_lim_pop[2]))
cov_nc <- ((rep((1/N),N) %*% (E_lim_n*E_lim_c)) - (Exp_lim_pop[2]*Exp_lim_pop[1]))
cov(rawdat)
matrix(c(Var_lim_pop_c,sqrt(cov_cn),sqrt(cov_nc),Var_lim_pop_n),2,2)
cov(rawdat)
matrix(c(Var_lim_pop_c,cov_cn,cov_nc,Var_lim_pop_n),2,2)
plot(ellip_prey[[1]],type="l",xlim=c(-22,-10),ylim=c(6,18),col="gray",xlab="d13C",ylab="d15N")
for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(ellipse(x=0,scale = c(sqrt(Var_lim_c[i]),sqrt(Var_lim_n[i])),centre=c(E_lim_c[i],E_lim_n[i]),level=CI))
}
points(E_lim_c,E_lim_n,col="black",pch=16,cex=0.7)
#pop_ellipse <- ellipse(x=0,scale=c(sqrt(Var_lim_pop_c),sqrt(Var_lim_pop_n)),centre=Exp_lim_pop)
pop_ellipse <- ellipse(x=0,scale=matrix(c(Var_lim_pop_c,cov_cn,cov_nc,Var_lim_pop_n),2,2),centre=Exp_lim_pop)
points(Exp_lim_pop[1],Exp_lim_pop[2],pch=16,col="black")
lines(pop_ellipse,col="black",lty=3,lwd=3)
rawdat <- cbind(c(c_m[1,4000:5000],c_m[2,4000:5000]),c(n_m[1,4000:5000],n_m[2,4000:5000]))
plot(rawdat)
cov(rawdat)
mean(rawdat)
apply(rawdat,2,mean)
rawdatell <- ellipse(x=0,scale=cov(rawdat),centre=apply(rawdat,2,mean))
points(rawdatell)
cov
?cov
?ellipse
rawdat
plot(rawdat)
rawdat <- cbind(c(c_m[1,4080:5000],c_m[2,4080:5000]),c(n_m[1,4080:5000],n_m[2,4080:5000]))
plot(rawdat)
rawdat <- cbind(c(c_m[1,4980:5000],c_m[2,4980:5000]),c(n_m[1,4980:5000],n_m[2,4980:5000]))
plot(rawdat)
cov(rawdat)
rawdat <- cbind(c(c_m[1,4980:5000],c_m[2,4980:5000]),c(n_m[1,4980:5000]-1,n_m[2,4980:5000]-1))
plot(rawdat)
rawdat <- cbind(c(c_m[1,4980:5000]-1,c_m[2,4980:5000]),c(n_m[1,4980:5000]-1,n_m[2,4980:5000]))
plot(rawdat)
rawdat <- cbind(c(c_m[1,4980:5000]-2,c_m[2,4980:5000]),c(n_m[1,4980:5000]-1,n_m[2,4980:5000]))
plot(rawdat)
rawdat <- cbind(c(c_m[1,4980:5000]-0.1,c_m[2,4980:5000]),c(n_m[1,4980:5000]-1,n_m[2,4980:5000]))
plot(rawdat)
rawdat <- cbind(c(c_m[1,4980:5000]-0.1,c_m[2,4980:5000]),c(n_m[1,4980:5000]-0.5,n_m[2,4980:5000]))
plot(rawdat)
rawdat <- cbind(c(c_m[1,4980:5000]+0.5,c_m[2,4980:5000]),c(n_m[1,4980:5000]-0.5,n_m[2,4980:5000]))
plot(rawdat)
cov(rawdat)
cor(rawdat)
cov(rawdat)
rawdat <- cbind(c(c_m[1,4980:5000]),c(n_m[1,4980:5000]))
plot(rawdat)
cov(rawdat)
?cov
cov(rawdat[,1],rawdat[,2])
cov(x=rawdat[,1],y=rawdat[,2])
cov(x=rawdat)
radat
rawdat
rm(list=c(ls()))
#Simulated consumer code
library(ellipse)
library(gtools)
library(RColorBrewer)
#Import prey data
prey <- read.csv("Prey.csv",header=TRUE)
nprey <- length(prey[,1])
ellip_prey <- list(nprey); CI <- 0.95
#build ellipses for prey
for (i in 1:nprey) {
#Sigma <- matrix(c(prey$CSD[i],0,0,prey$NSD[i]),2,2)
mu <- c(prey$CM[i],prey$NM[i])
ellip_prey[[i]] <- ellipse(x=0,scale = c(prey$CSD[i],prey$NSD[i]),centre=mu,level=CI)
}
x = prey$d13C
x
x = prey$CM
x
plot(x)
cov(x)
y = prey$NM
cov(cbind(x,y))
plot(x,y)
