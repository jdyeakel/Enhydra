for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
}
#Dirichlet-Normal Approximation for expectation and variance
a0 <- sum(Dir_param[1,1:nprey])
EDir_c <- (Dir_param[1,1:nprey]/a0) %*% prey$CM
EDir_n <- (Dir_param[1,1:nprey]/a0) %*% prey$NM
Ep <- Dir_param[1,1:nprey]/a0
VarDir_p <- sapply(Dir_param,function(x){(x*(a0-x))/(a0^2*(a0+1))})
CovDir_p <- matrix(0,nprey,nprey)
for (i in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[i,j] <- (-(Dir_param[i]*Dir_param[j] / a0^2*(a0 + 1))) * prey$CM[j]
}
}
VarDir_c_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_c_vec[i] <- Ep[i]^2 * prey$CSD[i]^2  + (prey$CSD[i]^2)*VarDir_p[i] #+ VarDir_p[i]*prey$CM[i]^2 + prey$CM[i]*sum(CovDir_p[i,])
}
VarDir_c <- sum(VarDir_c_vec)
analyticEDir <- sapply(seq(1,t_term),function(x){f^x*(c_init - EDir_c) + EDir_c})
plot(c_m[ind,2:10000],pch=16,cex=0.5,xlab="time",ylab="d13C",col="gray")
lines(analyticEDir)
binsize = 1000
analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*cp_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(c_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d13C SD",col="black")
lines(analyticDirSD)
Dir_param
Dir_param <- matrix(1,N,nprey)
Dir_param[1,3:8] <- 10
#Which prey item does each consumer specialize on?
s_prey <- sample(nprey,N,replace=TRUE)
#cumulative distribution
#plot(sapply(seq(1,12),function(x){length(which(s_prey<x))/length(s_prey)}))
#Loop over time
for (t in 1:(t_term-1)) {
#Loop over consumers
for (i in 1:N) {
#Define the carbon, nitrogen isotope values of body at time t
cb <- c_m[i,t]
nb <- n_m[i,t]
#Define body mass of consumer
mb <- bmass[i]
#Determine next prey item
#With probability equal to e_gen[i], they will specialize
#With probability equal to 1-e_gen[i], they will draw from prey randomly
#RANDOM DRAW VERSION
#Draw random value
#     rdraw <- runif(1)
#     if (rdraw < theta[i]) {
#       #If specialist, select it's preferred prey
#       next_prey <- s_prey[i]
#     } else {
#       #If generalist, randomly select from all prey
#       next_prey <- sample(nprey,1,replace=TRUE)
#     }
#     #Randomly draw prey isotope values from known mean and sd
#     cp_mean <- prey$CM[next_prey]
#     cp_sd <- prey$CSD[next_prey]
#     cp <- rnorm(1,cp_mean,cp_sd)
#     np_mean <- prey$NM[next_prey]
#     np_sd <- prey$NSD[next_prey]
#     np <- rnorm(1,np_mean,np_sd)
#DIRICHLET VERSION
#draw proportional contribution vector from random dirichlet
p_vec <- numeric(nprey)
#if (N == 1) {
#  p_vec[1:nprey-1] <- rdirichlet(1,Dir_param)
#} else {
p_vec[1:nprey] <- rdirichlet(1,Dir_param[i,])
#}
#p_vec[nprey] <- 1 - sum(p_vec)
#Draw prey values from each prey
cp_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$CM[x],prey$CSD[x])})
np_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$NM[x],prey$NSD[x])})
#Calculate weighted average
cp <- p_vec %*% cp_vec
np <- p_vec %*% np_vec
#Prey biomass
#set to one if each prey is to be equally weighted
#(assume 1 kg of each thing is eaten rather than at individual level)
mp <- 1 #prey$Biomass[next_prey]
#weights for body size
f <- mb/(mb + mp)
cb_next <- f*cb + (1-f)*cp
nb_next <- f*nb + (1-f)*np
c_m[i,t+1] <- cb_next
n_m[i,t+1] <- nb_next
} #end i
} #end t
#Dirichlet-Normal Approximation for expectation and variance
a0 <- sum(Dir_param[1,1:nprey])
EDir_c <- (Dir_param[1,1:nprey]/a0) %*% prey$CM
EDir_n <- (Dir_param[1,1:nprey]/a0) %*% prey$NM
Ep <- Dir_param[1,1:nprey]/a0
VarDir_p <- sapply(Dir_param,function(x){(x*(a0-x))/(a0^2*(a0+1))})
CovDir_p <- matrix(0,nprey,nprey)
for (i in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[i,j] <- (-(Dir_param[i]*Dir_param[j] / a0^2*(a0 + 1))) * prey$CM[j]
}
}
VarDir_c_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_c_vec[i] <- (prey$CSD[i]^2)*VarDir_p[i] + Ep[i]^2 * prey$CSD[i]^2  #+ VarDir_p[i]*prey$CM[i]^2 + prey$CM[i]*sum(CovDir_p[i,])
}
VarDir_c <- sum(VarDir_c_vec)
binsize = 1000
analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*cp_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(c_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d13C SD",col="black")
lines(analyticDirSD)
Dir_param <- matrix(1,N,nprey)
Dir_param[1,6] <- 100
#Which prey item does each consumer specialize on?
s_prey <- sample(nprey,N,replace=TRUE)
#cumulative distribution
#plot(sapply(seq(1,12),function(x){length(which(s_prey<x))/length(s_prey)}))
#Loop over time
for (t in 1:(t_term-1)) {
#Loop over consumers
for (i in 1:N) {
#Define the carbon, nitrogen isotope values of body at time t
cb <- c_m[i,t]
nb <- n_m[i,t]
#Define body mass of consumer
mb <- bmass[i]
#Determine next prey item
#With probability equal to e_gen[i], they will specialize
#With probability equal to 1-e_gen[i], they will draw from prey randomly
#RANDOM DRAW VERSION
#Draw random value
#     rdraw <- runif(1)
#     if (rdraw < theta[i]) {
#       #If specialist, select it's preferred prey
#       next_prey <- s_prey[i]
#     } else {
#       #If generalist, randomly select from all prey
#       next_prey <- sample(nprey,1,replace=TRUE)
#     }
#     #Randomly draw prey isotope values from known mean and sd
#     cp_mean <- prey$CM[next_prey]
#     cp_sd <- prey$CSD[next_prey]
#     cp <- rnorm(1,cp_mean,cp_sd)
#     np_mean <- prey$NM[next_prey]
#     np_sd <- prey$NSD[next_prey]
#     np <- rnorm(1,np_mean,np_sd)
#DIRICHLET VERSION
#draw proportional contribution vector from random dirichlet
p_vec <- numeric(nprey)
#if (N == 1) {
#  p_vec[1:nprey-1] <- rdirichlet(1,Dir_param)
#} else {
p_vec[1:nprey] <- rdirichlet(1,Dir_param[i,])
#}
#p_vec[nprey] <- 1 - sum(p_vec)
#Draw prey values from each prey
cp_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$CM[x],prey$CSD[x])})
np_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$NM[x],prey$NSD[x])})
#Calculate weighted average
cp <- p_vec %*% cp_vec
np <- p_vec %*% np_vec
#Prey biomass
#set to one if each prey is to be equally weighted
#(assume 1 kg of each thing is eaten rather than at individual level)
mp <- 1 #prey$Biomass[next_prey]
#weights for body size
f <- mb/(mb + mp)
cb_next <- f*cb + (1-f)*cp
nb_next <- f*nb + (1-f)*np
c_m[i,t+1] <- cb_next
n_m[i,t+1] <- nb_next
} #end i
} #end t
#Dirichlet-Normal Approximation for expectation and variance
a0 <- sum(Dir_param[1,1:nprey])
EDir_c <- (Dir_param[1,1:nprey]/a0) %*% prey$CM
EDir_n <- (Dir_param[1,1:nprey]/a0) %*% prey$NM
Ep <- Dir_param[1,1:nprey]/a0
VarDir_p <- sapply(Dir_param,function(x){(x*(a0-x))/(a0^2*(a0+1))})
CovDir_p <- matrix(0,nprey,nprey)
for (i in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[i,j] <- (-(Dir_param[i]*Dir_param[j] / a0^2*(a0 + 1))) * prey$CM[j]
}
}
VarDir_c_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_c_vec[i] <- (prey$CSD[i]^2)*VarDir_p[i] + Ep[i]^2 * prey$CSD[i]^2  #+ VarDir_p[i]*prey$CM[i]^2 + prey$CM[i]*sum(CovDir_p[i,])
}
VarDir_c <- sum(VarDir_c_vec)
binsize = 1000
analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*cp_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(c_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d13C SD",col="black")
lines(analyticDirSD)
#Plot prey ellipses
plot(ellip_prey[[1]],type="l",xlim=c(-22,-10),ylim=c(6,18),col="gray",xlab="d13C",ylab="d15N")
for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
}
binsize = 1000
analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*cp_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(c_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d13C SD",col="black")
lines(analyticDirSD)
lines(analyticSD)
VarDir_c_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_c_vec[i] <- (prey$CSD[i]^2)*VarDir_p[i] + Ep[i]^2 * prey$CSD[i]^2  #+ VarDir_p[i]*prey$CM[i]^2 + prey$CM[i]*sum(CovDir_pC[i,])
}
VarDir_c <- sum(VarDir_c_vec)
VarDir_n_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_n_vec[i] <- (prey$NSD[i]^2)*VarDir_p[i] + Ep[i]^2 * prey$NSD[i]^2  #+ VarDir_p[i]*prey$NM[i]^2 + prey$NM[i]*sum(CovDir_pN[i,])
}
VarDir_n <- sum(VarDir_n_vec)
binsize = 1000
analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*cp_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(c_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d13C SD",col="black")
lines(analyticDirSD)
tail(analyticDirSD)
Dir_param <- matrix(1,N,nprey)
#Dir_param[1,6] <- 100
#Which prey item does each consumer specialize on?
s_prey <- sample(nprey,N,replace=TRUE)
#cumulative distribution
#plot(sapply(seq(1,12),function(x){length(which(s_prey<x))/length(s_prey)}))
#Loop over time
for (t in 1:(t_term-1)) {
#Loop over consumers
for (i in 1:N) {
#Define the carbon, nitrogen isotope values of body at time t
cb <- c_m[i,t]
nb <- n_m[i,t]
#Define body mass of consumer
mb <- bmass[i]
#Determine next prey item
#With probability equal to e_gen[i], they will specialize
#With probability equal to 1-e_gen[i], they will draw from prey randomly
#RANDOM DRAW VERSION
#Draw random value
#     rdraw <- runif(1)
#     if (rdraw < theta[i]) {
#       #If specialist, select it's preferred prey
#       next_prey <- s_prey[i]
#     } else {
#       #If generalist, randomly select from all prey
#       next_prey <- sample(nprey,1,replace=TRUE)
#     }
#     #Randomly draw prey isotope values from known mean and sd
#     cp_mean <- prey$CM[next_prey]
#     cp_sd <- prey$CSD[next_prey]
#     cp <- rnorm(1,cp_mean,cp_sd)
#     np_mean <- prey$NM[next_prey]
#     np_sd <- prey$NSD[next_prey]
#     np <- rnorm(1,np_mean,np_sd)
#DIRICHLET VERSION
#draw proportional contribution vector from random dirichlet
p_vec <- numeric(nprey)
#if (N == 1) {
#  p_vec[1:nprey-1] <- rdirichlet(1,Dir_param)
#} else {
p_vec[1:nprey] <- rdirichlet(1,Dir_param[i,])
#}
#p_vec[nprey] <- 1 - sum(p_vec)
#Draw prey values from each prey
cp_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$CM[x],prey$CSD[x])})
np_vec <- sapply(seq(1,nprey),function(x){rnorm(1,prey$NM[x],prey$NSD[x])})
#Calculate weighted average
cp <- p_vec %*% cp_vec
np <- p_vec %*% np_vec
#Prey biomass
#set to one if each prey is to be equally weighted
#(assume 1 kg of each thing is eaten rather than at individual level)
mp <- 1 #prey$Biomass[next_prey]
#weights for body size
f <- mb/(mb + mp)
cb_next <- f*cb + (1-f)*cp
nb_next <- f*nb + (1-f)*np
c_m[i,t+1] <- cb_next
n_m[i,t+1] <- nb_next
} #end i
} #end t
#Dirichlet-Normal Approximation for expectation and variance
a0 <- sum(Dir_param[1,1:nprey])
EDir_c <- (Dir_param[1,1:nprey]/a0) %*% prey$CM
EDir_n <- (Dir_param[1,1:nprey]/a0) %*% prey$NM
Ep <- Dir_param[1,1:nprey]/a0
VarDir_p <- sapply(Dir_param,function(x){(x*(a0-x))/(a0^2*(a0+1))})
CovDir_pC <- matrix(0,nprey,nprey)
for (i in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[i,j] <- (-(Dir_param[i]*Dir_param[j] / a0^2*(a0 + 1)) * prey$CM[i])
}
}
CovDir_pN <- matrix(0,nprey,nprey)
for (i in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[i,j] <- (-(Dir_param[i]*Dir_param[j] / a0^2*(a0 + 1)) * prey$NM[i])
}
}
VarDir_c_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_c_vec[i] <- (prey$CSD[i]^2)*VarDir_p[i] + Ep[i]^2 * prey$CSD[i]^2  #+ VarDir_p[i]*prey$CM[i]^2 + prey$CM[i]*sum(CovDir_pC[i,])
}
VarDir_c <- sum(VarDir_c_vec)
VarDir_n_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_n_vec[i] <- (prey$NSD[i]^2)*VarDir_p[i] + Ep[i]^2 * prey$NSD[i]^2  #+ VarDir_p[i]*prey$NM[i]^2 + prey$NM[i]*sum(CovDir_pN[i,])
}
VarDir_n <- sum(VarDir_n_vec)
tail(analyticDirSD)
binsize = 1000
analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*cp_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(c_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d13C SD",col="black")
lines(analyticDirSD)
tail(analyticDirSD)
#Plot prey ellipses
plot(ellip_prey[[1]],type="l",xlim=c(-22,-10),ylim=c(6,18),col="gray",xlab="d13C",ylab="d15N")
for (i in 2:nprey) {
lines(ellip_prey[[i]],col="gray")
}
for (i in 1:N) {
ind <- i
points(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
lines(c_m[ind,],n_m[ind,],pch=16,cex=0.25,col=colors[i])
}
binsize = 200
analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*np_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD)
binsize = 500
analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*np_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD)
VarDir_n_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_n_vec[i] <- (prey$NSD[i]^2)*VarDir_p[i] + Ep[i]^2 * prey$NSD[i]^2  #+ VarDir_p[i]*prey$NM[i]^2 + prey$NM[i]*sum(CovDir_pN[i,])
}
VarDir_n <- sum(VarDir_n_vec)
binsize = 500
analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*np_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD)
binsize = 1000
analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*cp_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_c*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(c_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d13C SD",col="black")
lines(analyticDirSD)
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD)
VarDir_p <- sapply(Dir_param,function(x){(x*(a0-x))/(a0^2*(a0+1))})
CovDir_pC <- matrix(0,nprey,nprey)
for (i in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[i,j] <- (-(Dir_param[i]*Dir_param[j] / a0^2*(a0 + 1)) * prey$CM[i])
}
}
CovDir_pN <- matrix(0,nprey,nprey)
for (i in 1:nprey) {
for (j in 1:nprey) {
CovDir_p[i,j] <- (-(Dir_param[i]*Dir_param[j] / a0^2*(a0 + 1)) * prey$NM[i])
}
}
VarDir_n_vec <- numeric(nprey)
for (i in 1:nprey) {
VarDir_n_vec[i] <- (prey$NSD[i]^2)*VarDir_p[i] + Ep[i]^2 * prey$NSD[i]^2  + VarDir_p[i]*prey$NM[i]^2 + prey$NM[i]*sum(CovDir_pN[i,])
}
VarDir_n <- sum(VarDir_n_vec)
binsize = 500
analyticSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*np_sd^2*(f-1)*(exp(2*(f-1)*x)-1))})
analyticDirSD <- sapply(seq(1,t_term),function(x){sqrt(0.5*VarDir_n*(f-1)*(exp(2*(f-1)*x)-1))})
bins <- seq(binsize+1,t_term,by=binsize)
sd_bin <- numeric(length(bins)-1)
for (i in 1:(length(bins)-1)) {
bin0 <- bins[i]
bin1 <- bins[i+1]
sd_bin[i] <- sd(n_m[ind,bin0:bin1])
}
#sapply(seq(binsize+1,t_term,by=binsize),function(x){sd(c_m[ind,x-binsize:x])})
#I don't know why ^ doesn't work!
plot(bins[-1],sd_bin,
pch=16,cex=0.5,xlim=c(0,tail(bins,n=1)),ylim=c(0,0.5),xlab="time",ylab="d15N SD",col="black")
lines(analyticDirSD)
